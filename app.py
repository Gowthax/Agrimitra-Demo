# -*- coding: utf-8 -*-
"""Agrimitrademo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HkNYtu_cd56sbOLmM5ak4PpcrX8ibVtO
"""

# Agrimitra Prototype - Google Colab

# Install translator library
!pip install googletrans==4.0.0-rc1 --quiet

import pandas as pd
from googletrans import Translator

# ---------------------------
# Step 1: Upload the 3 CSV files
# ---------------------------
from google.colab import files

print("Upload buyers.csv")
buyers_file = files.upload()
print("Upload crops.csv")
crops_file = files.upload()
print("Upload locations.csv")
locations_file = files.upload()

# Load CSVs into pandas DataFrames
buyers_df = pd.read_csv(list(buyers_file.keys())[0])
crops_df = pd.read_csv(list(crops_file.keys())[0])
locations_df = pd.read_csv(list(locations_file.keys())[0])

# ---------------------------
# Step 2: Take Farmer Input
# ---------------------------
print("\n--- Farmer Input ---")
farmer_location = input("Enter your Location (e.g., Coimbatore): ").strip()
farmer_soil = input("Enter your Soil Type (e.g., Black, Red, Loamy): ").strip()
farmer_season = input("Enter Current Season (Monsoon, Rabi/Winter, Summer): ").strip()
farmer_area = float(input("Enter your Land Area in hectares: ").strip())

# ---------------------------
# Step 3: Filter Suitable Crops by Location
# ---------------------------
location_info = locations_df[locations_df['Location'].str.lower() == farmer_location.lower()]

if location_info.empty:
    print("Location not found in dataset. Using all crops as fallback.")
    suitable_crops_list = crops_df['Crop'].tolist()
else:
    location_info = location_info.iloc[0]
    suitable_crops_list = [crop.strip() for crop in location_info['Top3SuitableCrops'].split(',')]

# Filter crops_df by suitable crops
suitable_crops_df = crops_df[crops_df['Crop'].isin(suitable_crops_list)].copy()

# ---------------------------
# Step 4: Compute MarketScore
# ---------------------------
# Normalize price and buyer demand
max_price = suitable_crops_df['AvgPrice_INRkg'].max()
max_demand = suitable_crops_df['BuyerDemand_kg'].max()

def compute_market_score(row):
    norm_price = row['AvgPrice_INRkg'] / max_price
    norm_demand = row['BuyerDemand_kg'] / max_demand
    soil_match = 1 if farmer_soil.lower() in row['SuitableSoils'].lower() else 0
    season_match = 1 if farmer_season.lower() in row['SuitableSeasons'].lower() else 0
    suitability = 0.5 * soil_match + 0.5 * season_match
    market_score = 0.5 * norm_price + 0.3 * norm_demand + 0.2 * suitability
    return market_score

suitable_crops_df['MarketScore'] = suitable_crops_df.apply(compute_market_score, axis=1)

# ---------------------------
# Step 5: Recommend Best Crop
# ---------------------------
best_crop_row = suitable_crops_df.loc[suitable_crops_df['MarketScore'].idxmax()]
best_crop = best_crop_row['Crop']
expected_income = best_crop_row['Yield_kgHa'] * farmer_area * best_crop_row['AvgPrice_INRkg']

# ---------------------------
# Step 6: Match Buyers
# ---------------------------
matched_buyers = buyers_df[buyers_df['Crop'].str.lower() == best_crop.lower()]

if matched_buyers.empty:
    matched_buyers_info = "No buyers found for this crop in dataset."
else:
    matched_buyers_info = matched_buyers[['BuyerName','PriceOffer_INRkg','MonthlyDemand_kg','Contact','Location']]

# ---------------------------
# Step 7: Generate MoU Preview
# ---------------------------
mou_text = f"Memorandum of Understanding (Demo)\nFarmer at {farmer_location} agrees to sell {int(best_crop_row['Yield_kgHa']*farmer_area)} kg of {best_crop} to {', '.join(matched_buyers['BuyerName'].tolist()) if not matched_buyers.empty else 'N/A'} at INR {best_crop_row['AvgPrice_INRkg']}/kg."

# ---------------------------
# Step 8: Translation to Hindi & Tamil
# ---------------------------
translator = Translator()

def translate_text(text, lang_code):
    try:
        translated = translator.translate(text, dest=lang_code)
        return translated.text
    except:
        return text  # fallback to English if translation fails

mou_en = mou_text
mou_hi = translate_text(mou_text, 'hi')
mou_ta = translate_text(mou_text, 'ta')

# ---------------------------
# Step 9: Print Outputs
# ---------------------------
print("\n--- Agrimitra Recommendation ---")
print(f"Best Crop Suggestion: {best_crop}")
print(f"Expected Gross Income (INR): {int(expected_income)}")
print("\nMatched Buyers:")
print(matched_buyers_info if not matched_buyers.empty else "No buyers found.")

print("\n--- MoU Preview ---")
print("\n--- English ---")
print(mou_en)
print("\n--- Hindi ---")
print(mou_hi)
print("\n--- Tamil ---")
print(mou_ta)

# ---------------------------
# Step 10: Scaling Notes (Comments)
# ---------------------------
"""
# Future Scaling Ideas:
1. Integrate AI/ML models to predict crop yield based on weather and soil data.
2. Forecast crop prices using time-series models.
3. Add a recommender system for matching farmers to best buyers automatically.
4. Include more languages for multilingual support.
5. Add interactive GUI with Streamlit for mobile-friendly demo.
"""

